{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Odoo+Docker\u3088\u3046\u3053\u305d\uff01 Welcome to my own documentation of installing Odoo with Docker! Authored by luigi-2ba3 To get started, navigate through the navigation bar on top or click Next -> Last Updated : 4/21/2025, 10PM","title":"Home"},{"location":"#odoodocker","text":"Welcome to my own documentation of installing Odoo with Docker! Authored by luigi-2ba3 To get started, navigate through the navigation bar on top or click Next -> Last Updated : 4/21/2025, 10PM","title":"Odoo+Docker\u3088\u3046\u3053\u305d\uff01"},{"location":"addons/intro/","text":"Add-ons and Modules Add-ons can be viewed as \"modules\" in a particular Odoo instance. In the Using Odoo section, we already have accessed the dashboard or the \"Apps\" page, which displayed numerous items like Sales , Invoicing , and so forth. These items are also add-ons of their own. Add-ons are not necessarily applications seen in this page by default. They could be used to aid in the Odoo instance by whatever purpose the developer wants to carry it out with. Displaying All Add-ons Present While in debug mode in the dashboard, simply head to the search field for the apps and press Backspace to remove the Apps filter. This will display all add-ons present in the Odoo instance. As shown, add-ons that aren't applications but come with the default Odoo instance do not show a dedicated icon but rather, a generic, outlined cube. It can also be seen that the number of items on the sidebar filtering all the add-ons by categories will increase. File Locations Built-in Add-ons In our Odoo instance run with Docker, it comes bundled with add-ons, some of which are required to be explicitly activated from the Apps page. These add-ons are located in this directory of our container: /usr/lib/python3/dist-packages/odoo/addons Custom Add-ons Custom add-ons are user-defined or are developed independently of Odoo. Traditionally, one has to define the path of a folder where the custom add-ons will be placed in their Odoo .conf file. This is by convention as custom add-ons can still be placed in the same directory as the built-in add-ons, but it will mix up with the built-in ones. In our Docker setup, it already has been setup for us. The custom add-ons are located in this directory of our container: /mnt/extra-addons Odoo sees this as another add-ons folder, and are read the same as the built-in ones. Alternatively, the extra-addons folder can be found in one of the Volumes in Docker that has this file structure: <VolumeHash> \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 __manifest__.py \u251c\u2500\u2500 controllers \u251c\u2500\u2500 demo \u251c\u2500\u2500 models \u251c\u2500\u2500 security \u2514\u2500\u2500 views This volume is completely synonymous to /mnt/extra-addons in the Odoo container. Copying Add-ons This action involves the use of the docker cp command. Host-to-Container docker cp <host-path> odoo:/mnt/extra-addons Where <host-path> is the path to the add-on in your local machine. For example, if I developed an add-on cashiering from my Desktop and wanted to add this as a custom add-on to my Odoo instance, then: docker cp /Users/User/Desktop/cashiering odoo:/mnt/extra-addons Container-to-Host docker cp odoo:<path-inside-container> <host-path> Suppose I wanted to inspect the sale add-on built-in into Odoo and have a copy of it in my Desktop, then: docker cp odoo:/usr/lib/python3/dist-packages/odoo/addons/sale /Users/User/Desktop","title":"Introduction to Add-ons and Modules"},{"location":"addons/intro/#add-ons-and-modules","text":"Add-ons can be viewed as \"modules\" in a particular Odoo instance. In the Using Odoo section, we already have accessed the dashboard or the \"Apps\" page, which displayed numerous items like Sales , Invoicing , and so forth. These items are also add-ons of their own. Add-ons are not necessarily applications seen in this page by default. They could be used to aid in the Odoo instance by whatever purpose the developer wants to carry it out with.","title":"Add-ons and Modules"},{"location":"addons/intro/#displaying-all-add-ons-present","text":"While in debug mode in the dashboard, simply head to the search field for the apps and press Backspace to remove the Apps filter. This will display all add-ons present in the Odoo instance. As shown, add-ons that aren't applications but come with the default Odoo instance do not show a dedicated icon but rather, a generic, outlined cube. It can also be seen that the number of items on the sidebar filtering all the add-ons by categories will increase.","title":"Displaying All Add-ons Present"},{"location":"addons/intro/#file-locations","text":"","title":"File Locations"},{"location":"addons/intro/#built-in-add-ons","text":"In our Odoo instance run with Docker, it comes bundled with add-ons, some of which are required to be explicitly activated from the Apps page. These add-ons are located in this directory of our container: /usr/lib/python3/dist-packages/odoo/addons","title":"Built-in Add-ons"},{"location":"addons/intro/#custom-add-ons","text":"Custom add-ons are user-defined or are developed independently of Odoo. Traditionally, one has to define the path of a folder where the custom add-ons will be placed in their Odoo .conf file. This is by convention as custom add-ons can still be placed in the same directory as the built-in add-ons, but it will mix up with the built-in ones. In our Docker setup, it already has been setup for us. The custom add-ons are located in this directory of our container: /mnt/extra-addons Odoo sees this as another add-ons folder, and are read the same as the built-in ones. Alternatively, the extra-addons folder can be found in one of the Volumes in Docker that has this file structure: <VolumeHash> \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 __manifest__.py \u251c\u2500\u2500 controllers \u251c\u2500\u2500 demo \u251c\u2500\u2500 models \u251c\u2500\u2500 security \u2514\u2500\u2500 views This volume is completely synonymous to /mnt/extra-addons in the Odoo container.","title":"Custom Add-ons"},{"location":"addons/intro/#copying-add-ons","text":"This action involves the use of the docker cp command.","title":"Copying Add-ons"},{"location":"addons/intro/#host-to-container","text":"docker cp <host-path> odoo:/mnt/extra-addons Where <host-path> is the path to the add-on in your local machine. For example, if I developed an add-on cashiering from my Desktop and wanted to add this as a custom add-on to my Odoo instance, then: docker cp /Users/User/Desktop/cashiering odoo:/mnt/extra-addons","title":"Host-to-Container"},{"location":"addons/intro/#container-to-host","text":"docker cp odoo:<path-inside-container> <host-path> Suppose I wanted to inspect the sale add-on built-in into Odoo and have a copy of it in my Desktop, then: docker cp odoo:/usr/lib/python3/dist-packages/odoo/addons/sale /Users/User/Desktop","title":"Container-to-Host"},{"location":"addons/models/","text":"Models","title":"Models"},{"location":"addons/models/#models","text":"","title":"Models"},{"location":"addons/scaffolding/","text":"Creating (Scaffolding) an Add-on Just like in numerous frameworks that involve databases, scaffolding refers to the process of making a \"skeleton\" or \"structure\". In fact, this does not only revolve databases alone but encompasses anything that involves the making of a readymade, more-or-less structure (just like a template or boilerplate code). In Odoo, an addon can be scaffolded. This takes care of setting up all the files an add-on needs without the need of manually creating those files. In a traditional setup of Odoo, the way to scaffold an add-on is: odoo-bin scaffold <name> <path> Where <name> is the name of the add-on and <path> is the path to where the add-on will be created. In a Docker setup, the command is slightly different. The command to scaffold an add-on in a Docker setup is: docker exec <container-name> odoo scaffold <name> /mnt/extra-addons /usr/bin/odoo is analogous to odoo-bin above, which is nested under a command, docker exec which calls docker to execute whatever shell command is appended before it. <name> still refers to the name of the add-on. /mnt/extra-addons is a fixed path where all of the extra or custom add-ons will be added. In Docker, this is a volume where it cooperates with the Odoo container alongside the second volume which handles the Postgre container (the container that is being demonstrated to delete in Odoo + Docker/Delete a Volume ). For example, to create a custom \"student\" add-on, the command would be: docker exec odoo odoo scaffold student /mnt/extra-addons Where the first odoo is the name of the Odoo container, the second odoo analogous to odoo-bin, and student is the name of our add-on. Afterwards, you can find the volume where this file structure resembles the following in Docker Desktop under the Volumes view from the sidebar: As shown, the model that we scaffolded, student is present in the root of this directory. You can further verify that this is inside /mnt/extra-addons by inspecting the file structure of your Odoo container. Importing an Add-on to the Odoo Container As per the official README in the Odoo DockerHub repository, the command to import an add-on to the Odoo container is: docker run -v /path/to/addons:/mnt/extra-addons -p 8069:8069 --name odoo --link db:db -t odoo Where /path/to/addons may be an individual folder of an add-on or a folder comprised of add-ons within. Furthermore, this command subsequently starts your Odoo container with the add-on(s) present in the /mnt/extra-addons directory. An alternative to import an existing add-on to the Odoo container is by this command: docker cp /path/to/addon <container-name>:/mnt/extra-addons Where <container-name> is the name of your Odoo container, throughout this documentation being that the name is odoo . For example, if I have an add-on named student from my Desktop in my local machine, I can import it to the Odoo container by: docker cp /Users/User/Desktop/student odoo:/mnt/extra-addons This verbose output should be present after running docker cp : Successfully copied XX.XkB to odoo:/mnt/extra-addons Verifying the Add-on is Present in Odoo Back in the Dashboard in the upper-left of the navigation bar, do Update Apps List and Updates . Afterwards, you can search for the add-on that you have scaffolded in the search bar of the Apps page. Make sure the Apps filter is removed by pressing Backspace in the search bar, then search for the add-on. In this example, student :","title":"Creating (Scaffolding) an Add-on"},{"location":"addons/scaffolding/#creating-scaffolding-an-add-on","text":"Just like in numerous frameworks that involve databases, scaffolding refers to the process of making a \"skeleton\" or \"structure\". In fact, this does not only revolve databases alone but encompasses anything that involves the making of a readymade, more-or-less structure (just like a template or boilerplate code). In Odoo, an addon can be scaffolded. This takes care of setting up all the files an add-on needs without the need of manually creating those files. In a traditional setup of Odoo, the way to scaffold an add-on is: odoo-bin scaffold <name> <path> Where <name> is the name of the add-on and <path> is the path to where the add-on will be created. In a Docker setup, the command is slightly different. The command to scaffold an add-on in a Docker setup is: docker exec <container-name> odoo scaffold <name> /mnt/extra-addons /usr/bin/odoo is analogous to odoo-bin above, which is nested under a command, docker exec which calls docker to execute whatever shell command is appended before it. <name> still refers to the name of the add-on. /mnt/extra-addons is a fixed path where all of the extra or custom add-ons will be added. In Docker, this is a volume where it cooperates with the Odoo container alongside the second volume which handles the Postgre container (the container that is being demonstrated to delete in Odoo + Docker/Delete a Volume ). For example, to create a custom \"student\" add-on, the command would be: docker exec odoo odoo scaffold student /mnt/extra-addons Where the first odoo is the name of the Odoo container, the second odoo analogous to odoo-bin, and student is the name of our add-on. Afterwards, you can find the volume where this file structure resembles the following in Docker Desktop under the Volumes view from the sidebar: As shown, the model that we scaffolded, student is present in the root of this directory. You can further verify that this is inside /mnt/extra-addons by inspecting the file structure of your Odoo container.","title":"Creating (Scaffolding) an Add-on"},{"location":"addons/scaffolding/#importing-an-add-on-to-the-odoo-container","text":"As per the official README in the Odoo DockerHub repository, the command to import an add-on to the Odoo container is: docker run -v /path/to/addons:/mnt/extra-addons -p 8069:8069 --name odoo --link db:db -t odoo Where /path/to/addons may be an individual folder of an add-on or a folder comprised of add-ons within. Furthermore, this command subsequently starts your Odoo container with the add-on(s) present in the /mnt/extra-addons directory. An alternative to import an existing add-on to the Odoo container is by this command: docker cp /path/to/addon <container-name>:/mnt/extra-addons Where <container-name> is the name of your Odoo container, throughout this documentation being that the name is odoo . For example, if I have an add-on named student from my Desktop in my local machine, I can import it to the Odoo container by: docker cp /Users/User/Desktop/student odoo:/mnt/extra-addons This verbose output should be present after running docker cp : Successfully copied XX.XkB to odoo:/mnt/extra-addons","title":"Importing an Add-on to the Odoo Container"},{"location":"addons/scaffolding/#verifying-the-add-on-is-present-in-odoo","text":"Back in the Dashboard in the upper-left of the navigation bar, do Update Apps List and Updates . Afterwards, you can search for the add-on that you have scaffolded in the search bar of the Apps page. Make sure the Apps filter is removed by pressing Backspace in the search bar, then search for the add-on. In this example, student :","title":"Verifying the Add-on is Present in Odoo"},{"location":"setup/firsttimeuse/","text":"Using Odoo For the First Time When entering your local server hosting both your Postgre and Odoo containers, you'll be greeted with this page: For development purposes, you can supply these credentials with familiar or dummy details. For production, these should be secured however. Afterwards, you'll be greeted with a login page. Simply supply these with the credentials you entered in the previous page. You'll be greeted with the dashboard of your Odoo instance. Invoking Debug Mode For more in-depth purposes, especially when creating custom add-ons or modules, summon the command bar by pressing CTRL + K or CMD + K on Mac. Type debug and select the first option. The page will refresh which should now show additional items in the navigation bar and a \"bug\" icon to the top right.","title":"First-Time Setup"},{"location":"setup/firsttimeuse/#using-odoo-for-the-first-time","text":"When entering your local server hosting both your Postgre and Odoo containers, you'll be greeted with this page: For development purposes, you can supply these credentials with familiar or dummy details. For production, these should be secured however. Afterwards, you'll be greeted with a login page. Simply supply these with the credentials you entered in the previous page. You'll be greeted with the dashboard of your Odoo instance.","title":"Using Odoo For the First Time"},{"location":"setup/firsttimeuse/#invoking-debug-mode","text":"For more in-depth purposes, especially when creating custom add-ons or modules, summon the command bar by pressing CTRL + K or CMD + K on Mac. Type debug and select the first option. The page will refresh which should now show additional items in the navigation bar and a \"bug\" icon to the top right.","title":"Invoking Debug Mode"},{"location":"setup/install/","text":"Installing Odoo with Docker Prerequisites Docker Desktop (includes Docker CLI) Installation Proper Reference 1) Install and run a PostgresSQL container: docker run -d -e POSTGRES_USER=odoo -e POSTGRES_PASSWORD=odoo -e POSTGRES_DB=postgres --name db postgres:15 2) Install and run an Odoo instance and make sure to have the tag as -t odoo:16.0 with an appended :16.0 (for projects that require a specific version of Odoo to be developed on): docker run -p 8069:8069 --name odoo --link db:db -t odoo:16.0 3) Visit 127.0.0.1:8089 or whichever local IP was assigned with port number 8069 Docker Crash Course Start and Stop an Instance/Container Above, we set up an Odoo container with the tag odoo:16.0 , hence the name of the container we made is odoo docker stop odoo docker start -a odoo Delete a Container Should you wish to delete the odoo container if you run to an error that an already existing container with the odoo name already taken, get its container ID with docker ps -a A sample output would be: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ef3535b3afe3 da2782e8f015 \"/bin/sh -c 'echo Co\u2026\" 2 hours ago Exited (0) 2 hours ago cranky_haslett 7d0d5b20d3d0 odoo:16.0 \"/entrypoint.sh odoo\" 2 hours ago Up 2 hours 0.0.0.0:8069->8069/tcp, 8071-8072/tcp odoo 93ca78717132 postgres:15 \"docker-entrypoint.s\u2026\" 2 hours ago Up 2 hours 5432/tcp db In this case, 7d0d5b20d3d0 is the container ID of the Odoo instance, which is indicative of the image used, odoo:16.0 . Stop the container, then delete it: docker rm 7d0d5b20d3d0 Delete a Volume In Installation Proper , we executed docker run for both PostgreSQL and Odoo, which created two volumes with arbitrary names, as the case here in this sample screenshot in Docker Desktop. To verify which volume point to which container, for example in Docker Desktop, click on a volume then Container-in-use tab. In this example, this volume with a starting id of 9c813de is the volume for our PostgreSQL container. In Docker Desktop, you can drop the Postgre database and/or delete the entire Odoo instance by clicking on the red Trash icon, either from Volumes tab or the view of the container itself.","title":"Setting Up Odoo with Docker"},{"location":"setup/install/#installing-odoo-with-docker","text":"","title":"Installing Odoo with Docker"},{"location":"setup/install/#prerequisites","text":"Docker Desktop (includes Docker CLI)","title":"Prerequisites"},{"location":"setup/install/#installation-proper","text":"Reference 1) Install and run a PostgresSQL container: docker run -d -e POSTGRES_USER=odoo -e POSTGRES_PASSWORD=odoo -e POSTGRES_DB=postgres --name db postgres:15 2) Install and run an Odoo instance and make sure to have the tag as -t odoo:16.0 with an appended :16.0 (for projects that require a specific version of Odoo to be developed on): docker run -p 8069:8069 --name odoo --link db:db -t odoo:16.0 3) Visit 127.0.0.1:8089 or whichever local IP was assigned with port number 8069","title":"Installation Proper"},{"location":"setup/install/#docker-crash-course","text":"","title":"Docker Crash Course"},{"location":"setup/install/#start-and-stop-an-instancecontainer","text":"Above, we set up an Odoo container with the tag odoo:16.0 , hence the name of the container we made is odoo docker stop odoo docker start -a odoo","title":"Start and Stop an Instance/Container"},{"location":"setup/install/#delete-a-container","text":"Should you wish to delete the odoo container if you run to an error that an already existing container with the odoo name already taken, get its container ID with docker ps -a A sample output would be: CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES ef3535b3afe3 da2782e8f015 \"/bin/sh -c 'echo Co\u2026\" 2 hours ago Exited (0) 2 hours ago cranky_haslett 7d0d5b20d3d0 odoo:16.0 \"/entrypoint.sh odoo\" 2 hours ago Up 2 hours 0.0.0.0:8069->8069/tcp, 8071-8072/tcp odoo 93ca78717132 postgres:15 \"docker-entrypoint.s\u2026\" 2 hours ago Up 2 hours 5432/tcp db In this case, 7d0d5b20d3d0 is the container ID of the Odoo instance, which is indicative of the image used, odoo:16.0 . Stop the container, then delete it: docker rm 7d0d5b20d3d0","title":"Delete a Container"},{"location":"setup/install/#delete-a-volume","text":"In Installation Proper , we executed docker run for both PostgreSQL and Odoo, which created two volumes with arbitrary names, as the case here in this sample screenshot in Docker Desktop. To verify which volume point to which container, for example in Docker Desktop, click on a volume then Container-in-use tab. In this example, this volume with a starting id of 9c813de is the volume for our PostgreSQL container. In Docker Desktop, you can drop the Postgre database and/or delete the entire Odoo instance by clicking on the red Trash icon, either from Volumes tab or the view of the container itself.","title":"Delete a Volume"},{"location":"setup/vscsetup/","text":"Setting up Visual Studio Code for Odoo + Docker Visual Studio Code will be the basis for our text editor for this documentation since it offers plugins that will be useful in Odoo development. Dependencies Install the following plugins to Visual Studio Code: Odoo (pre-release) Docker Dev Containers After installing, it is important to note that the Docker icon should be visible from VS Code's Primary Side Bar and accessible, showing your containers and images in its default view similar to the image below: Editing Files in Containers While Docker is currently being viewed in the Side Bar, expand Volumes and refresh it. It should list all the volumes as they are listed in Docker Desktop, similar to the image below: Locate the volume where the custom add-ons are located (as shown in Custom Add-ons of Add-ons and Modules with that file structure), right-click on the volume, and Explore in Dev Container . Afterwards, a new window or the window will be refreshed connecting to that Docker volume. After trusting the files contained in that volume (since the window is refreshed to an entirely new session), your file tree should consist exactly as they were listed in Docker Desktop. You can now edit the files in that volume directly from Visual Studio Code. Aside from directly editing files, especially custom add-ons, in this manner, you can edit them in your local environment and copy it later to where your custom add-ons will be stored, which will be discussed in the next section.","title":"Visual Studio Code Integration"},{"location":"setup/vscsetup/#setting-up-visual-studio-code-for-odoo-docker","text":"Visual Studio Code will be the basis for our text editor for this documentation since it offers plugins that will be useful in Odoo development.","title":"Setting up Visual Studio Code for Odoo + Docker"},{"location":"setup/vscsetup/#dependencies","text":"Install the following plugins to Visual Studio Code: Odoo (pre-release) Docker Dev Containers After installing, it is important to note that the Docker icon should be visible from VS Code's Primary Side Bar and accessible, showing your containers and images in its default view similar to the image below:","title":"Dependencies"},{"location":"setup/vscsetup/#editing-files-in-containers","text":"While Docker is currently being viewed in the Side Bar, expand Volumes and refresh it. It should list all the volumes as they are listed in Docker Desktop, similar to the image below: Locate the volume where the custom add-ons are located (as shown in Custom Add-ons of Add-ons and Modules with that file structure), right-click on the volume, and Explore in Dev Container . Afterwards, a new window or the window will be refreshed connecting to that Docker volume. After trusting the files contained in that volume (since the window is refreshed to an entirely new session), your file tree should consist exactly as they were listed in Docker Desktop. You can now edit the files in that volume directly from Visual Studio Code. Aside from directly editing files, especially custom add-ons, in this manner, you can edit them in your local environment and copy it later to where your custom add-ons will be stored, which will be discussed in the next section.","title":"Editing Files in Containers"}]}